{\rtf1\ansi\ansicpg936\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red34\green36\blue38;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c17647\c18824\c20000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\f0\fs30 \cf2 \expnd0\expndtw0\kerning0
`timescale 1ns / 1ps\
\
module wraparoundLEDS(\
clk,\
rst,\
btn,\
btn1,\
counter,\
leds,\
\'a0\'a0\'a0 );\
\'a0\'a0\'a0 \
input clk;\
input rst;\
input btn0;\
input btn1;\
input [7:0] counter;\
\
output [3:0] leds;\
\
wire [4:0] state;\
wire reg count;\
wire rstebcmax;\
wire rstebctz;\
\
\'a0\'a0\'a0 \
eightbitcounter uut( clk_out, rstebcmax, rstebctz, counter, count); \
clockdivider uut2( clk, rst, clk_out);\'a0\'a0\'a0 \
\
always @(posedge clk or posedge rst)\
begin\
\'a0\'a0\'a0 \
\'a0\'a0\'a0 if (rst==1'b1)begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 state <= 2'b00;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rstebctz <= 1'b0;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0 else \
\'a0\'a0\'a0 begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 case(state)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b0000:begin \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 state <= (btn0) ? 4'b0001 : 4'b0000;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 state <= (btn1) ? 4'b0110 : 4'b0000;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b0001: state <= 4'b0010;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b0010: state <= 4'b0011;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b0011: state <= 4'b0100;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b0100: state <= 4'b0101;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b0101: state <= 4'b0000;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b0110: state <= 4'b0111;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b0111: state <= 4'b1000;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b1000: state <= 4'b1001;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b1001: state <= 4'b1010;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 4'b1010: state <= 4'b0000;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 default: state <= 4'b0000;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 endcase\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\'a0\'a0\'a0\'a0\'a0 \
end\
\
always @(state)\
begin\
rstebc = 0;\
case(state)\
\'a0\'a0\'a0 4'b0010: begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rstebcmax = 1'b1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (count == 0)begin \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leds <= 4'b0001;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0 4'b0011: begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rstebcmax = 1'b1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (count == 0)begin \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leds <= 4'b0010;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0 4'b0100: begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rstebcmax = 1'b1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (count == 0)begin \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leds <= 4'b0100;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0 4'b0101: begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rstebcmax = 1'b1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (count == 0)begin \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leds <= 4'b1000;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0 4'b0111: begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rstebcmax = 1'b1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (count == 0)begin \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leds <= 4'b1000;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0 4'b1000: begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rstebcmax = 1'b1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (count == 0)begin \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leds <= 4'b0100;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0 4'b1001: begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rstebcmax = 1'b1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (count == 0)begin \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leds <= 4'b0010;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
\'a0\'a0\'a0 4'b1010: begin\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rstebcmax = 1'b1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (count == 0)begin \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leds <= 4'b0001;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 end\
endcase\
\
end\
endmodule\
\
\
\
\
//module eightbitcounter\
module eightbitcounter(\
clk,\
rst,\
rstebctz,\
maximum,\
count\
);\
\
input clk;\
input rst;\
input rstebctz;\
input [7:0] maximum;\
\
output reg [7:0] count;\
\
always @(posedge clk or posedge rst or maximum)\
if (rst==1'b1)begin\
\'a0\'a0\'a0 count <= maximum;\
\'a0\'a0\'a0 end\
else if (rstebctz == 1'b1)begin\
\'a0\'a0\'a0 count <=0;\
\'a0\'a0\'a0 end\
else if (rst==0)begin\
\'a0\'a0\'a0 while(count > 0)begin\
\'a0\'a0\'a0 count = count - 1;\
\'a0\'a0\'a0 end\'a0\'a0\'a0\'a0 \
\'a0 end\
\
endmodule\
\
\
\
\
//module clockdivider\
module clockdivider(\
clk,\
rst,\
clk_out,\
\'a0\'a0\'a0 );\
\'a0\'a0\'a0 \
input clk;\
input rst;\
\
output reg clk_out;\
\
reg [26:0] counter;\
\
always @(posedge clk or posedge rst or counter or clk_out)\
begin\
if (rst==1'b1)begin\
\'a0\'a0\'a0 clk_out <= 0;\
\'a0\'a0\'a0 counter <= 0;\
\'a0\'a0\'a0 end\
if (rst==1'b0 && counter<'d100000000)begin\
\'a0\'a0\'a0 counter = counter + 1;\'a0\'a0\'a0 \
\'a0\'a0\'a0 end\
if (rst==1'b0 && counter=='d100000000)begin\
\'a0\'a0\'a0 clk_out = ~clk_out; \
\'a0\'a0\'a0 counter <= 0;\'a0\'a0 \
\'a0\'a0\'a0 end\'a0\'a0\'a0 \
end\
\'a0\'a0 \
endmodule}